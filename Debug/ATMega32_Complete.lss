
ATMega32_Complete.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00000dd2  00000e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  008000ee  008000ee  00000ef4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002683  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d74  00000000  00000000  0000384b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001800  00000000  00000000  000045bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000780  00000000  00000000  00005dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cea  00000000  00000000  00006540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d5f  00000000  00000000  0000722a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  00008f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_1>
   8:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_2>
   c:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__vector_6>
  1c:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__vector_7>
  20:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__vector_8>
  24:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__vector_9>
  28:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_10>
  2c:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3e       	cpi	r26, 0xEE	; 238
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae ee       	ldi	r26, 0xEE	; 238
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 33       	cpi	r26, 0x34	; 52
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  8a:	0c 94 e7 06 	jmp	0xdce	; 0xdce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Print_TranslatedGesture>:
		LCD_enuWriteIntegerNum(pinky);
	}
}

void Print_TranslatedGesture(void)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
	u8 L_iter;
	u8 flag=0;
	u8 temp=50;
  98:	62 e3       	ldi	r22, 0x32	; 50
	
		for(L_iter=0;L_iter<MAX_WORDS;L_iter++)
  9a:	c0 e0       	ldi	r28, 0x00	; 0
  9c:	ae c0       	rjmp	.+348    	; 0x1fa <Print_TranslatedGesture+0x168>
		{
			flag=0;
			if((thumb <= (SENSOR_TOLERANCE+Signs[L_iter].Hand_thumb))&&((thumb >= (Signs[L_iter].Hand_thumb-SENSOR_TOLERANCE))))
  9e:	0c 2f       	mov	r16, r28
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	f8 01       	movw	r30, r16
  a4:	ee 0f       	add	r30, r30
  a6:	ff 1f       	adc	r31, r31
  a8:	c8 01       	movw	r24, r16
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	e8 0f       	add	r30, r24
  b8:	f9 1f       	adc	r31, r25
  ba:	e4 59       	subi	r30, 0x94	; 148
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	80 81       	ld	r24, Z
  c0:	91 81       	ldd	r25, Z+1	; 0x01
  c2:	ac 01       	movw	r20, r24
  c4:	42 5e       	subi	r20, 0xE2	; 226
  c6:	5f 4f       	sbci	r21, 0xFF	; 255
  c8:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <thumb>
  cc:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <thumb+0x1>
  d0:	42 17       	cp	r20, r18
  d2:	53 07       	cpc	r21, r19
  d4:	08 f4       	brcc	.+2      	; 0xd8 <Print_TranslatedGesture+0x46>
  d6:	90 c0       	rjmp	.+288    	; 0x1f8 <Print_TranslatedGesture+0x166>
  d8:	4e 97       	sbiw	r24, 0x1e	; 30
  da:	28 17       	cp	r18, r24
  dc:	39 07       	cpc	r19, r25
  de:	08 f4       	brcc	.+2      	; 0xe2 <Print_TranslatedGesture+0x50>
  e0:	8b c0       	rjmp	.+278    	; 0x1f8 <Print_TranslatedGesture+0x166>
			{
				flag++;
			}else{continue;}
			if((indexfinger <= (SENSOR_TOLERANCE+Signs[L_iter].Hand_index))&&((indexfinger >= (Signs[L_iter].Hand_index-SENSOR_TOLERANCE))))
  e2:	c8 01       	movw	r24, r16
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	f8 01       	movw	r30, r16
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	e8 0f       	add	r30, r24
  f8:	f9 1f       	adc	r31, r25
  fa:	e4 59       	subi	r30, 0x94	; 148
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	82 81       	ldd	r24, Z+2	; 0x02
 100:	93 81       	ldd	r25, Z+3	; 0x03
 102:	ac 01       	movw	r20, r24
 104:	42 5e       	subi	r20, 0xE2	; 226
 106:	5f 4f       	sbci	r21, 0xFF	; 255
 108:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <indexfinger>
 10c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <indexfinger+0x1>
 110:	42 17       	cp	r20, r18
 112:	53 07       	cpc	r21, r19
 114:	08 f4       	brcc	.+2      	; 0x118 <Print_TranslatedGesture+0x86>
 116:	70 c0       	rjmp	.+224    	; 0x1f8 <Print_TranslatedGesture+0x166>
 118:	4e 97       	sbiw	r24, 0x1e	; 30
 11a:	28 17       	cp	r18, r24
 11c:	39 07       	cpc	r19, r25
 11e:	08 f4       	brcc	.+2      	; 0x122 <Print_TranslatedGesture+0x90>
 120:	6b c0       	rjmp	.+214    	; 0x1f8 <Print_TranslatedGesture+0x166>
			{
				flag++;
			}else{continue;}
			if((middle <= (SENSOR_TOLERANCE+Signs[L_iter].Hand_middle))&&((middle >= (Signs[L_iter].Hand_middle-SENSOR_TOLERANCE))))
 122:	c8 01       	movw	r24, r16
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	f8 01       	movw	r30, r16
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	e8 0f       	add	r30, r24
 138:	f9 1f       	adc	r31, r25
 13a:	e4 59       	subi	r30, 0x94	; 148
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	84 81       	ldd	r24, Z+4	; 0x04
 140:	95 81       	ldd	r25, Z+5	; 0x05
 142:	ac 01       	movw	r20, r24
 144:	42 5e       	subi	r20, 0xE2	; 226
 146:	5f 4f       	sbci	r21, 0xFF	; 255
 148:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <middle>
 14c:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <middle+0x1>
 150:	42 17       	cp	r20, r18
 152:	53 07       	cpc	r21, r19
 154:	08 f4       	brcc	.+2      	; 0x158 <Print_TranslatedGesture+0xc6>
 156:	50 c0       	rjmp	.+160    	; 0x1f8 <Print_TranslatedGesture+0x166>
 158:	4e 97       	sbiw	r24, 0x1e	; 30
 15a:	28 17       	cp	r18, r24
 15c:	39 07       	cpc	r19, r25
 15e:	08 f4       	brcc	.+2      	; 0x162 <Print_TranslatedGesture+0xd0>
 160:	4b c0       	rjmp	.+150    	; 0x1f8 <Print_TranslatedGesture+0x166>
			{
				flag++;
			}else{continue;}
			if((ring <= (SENSOR_TOLERANCE+Signs[L_iter].Hand_ring))&&((ring >= (Signs[L_iter].Hand_ring-SENSOR_TOLERANCE))))
 162:	c8 01       	movw	r24, r16
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	f8 01       	movw	r30, r16
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	e8 0f       	add	r30, r24
 178:	f9 1f       	adc	r31, r25
 17a:	e4 59       	subi	r30, 0x94	; 148
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	86 81       	ldd	r24, Z+6	; 0x06
 180:	97 81       	ldd	r25, Z+7	; 0x07
 182:	ac 01       	movw	r20, r24
 184:	42 5e       	subi	r20, 0xE2	; 226
 186:	5f 4f       	sbci	r21, 0xFF	; 255
 188:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <ring>
 18c:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <ring+0x1>
 190:	42 17       	cp	r20, r18
 192:	53 07       	cpc	r21, r19
 194:	88 f1       	brcs	.+98     	; 0x1f8 <Print_TranslatedGesture+0x166>
 196:	4e 97       	sbiw	r24, 0x1e	; 30
 198:	28 17       	cp	r18, r24
 19a:	39 07       	cpc	r19, r25
 19c:	68 f1       	brcs	.+90     	; 0x1f8 <Print_TranslatedGesture+0x166>
			{
				flag++;
			}else{continue;}
			if((pinky <= (SENSOR_TOLERANCE+Signs[L_iter].Hand_pinky))&&((pinky >= (Signs[L_iter].Hand_pinky-SENSOR_TOLERANCE))))
 19e:	c8 01       	movw	r24, r16
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	f8 01       	movw	r30, r16
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	e8 0f       	add	r30, r24
 1b4:	f9 1f       	adc	r31, r25
 1b6:	e4 59       	subi	r30, 0x94	; 148
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	80 85       	ldd	r24, Z+8	; 0x08
 1bc:	91 85       	ldd	r25, Z+9	; 0x09
 1be:	ac 01       	movw	r20, r24
 1c0:	42 5e       	subi	r20, 0xE2	; 226
 1c2:	5f 4f       	sbci	r21, 0xFF	; 255
 1c4:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <pinky>
 1c8:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <pinky+0x1>
 1cc:	42 17       	cp	r20, r18
 1ce:	53 07       	cpc	r21, r19
 1d0:	98 f0       	brcs	.+38     	; 0x1f8 <Print_TranslatedGesture+0x166>
 1d2:	4e 97       	sbiw	r24, 0x1e	; 30
 1d4:	28 17       	cp	r18, r24
 1d6:	39 07       	cpc	r19, r25
 1d8:	78 f0       	brcs	.+30     	; 0x1f8 <Print_TranslatedGesture+0x166>
			{
				flag++;
			}else{continue;}
			if(flag == 5)
			{
				if(temp != L_iter)
 1da:	c6 17       	cp	r28, r22
 1dc:	69 f0       	breq	.+26     	; 0x1f8 <Print_TranslatedGesture+0x166>
				{
					temp = L_iter;
					LCD_enuWriteCommand(0x01);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 39 02 	call	0x472	; 0x472 <LCD_enuWriteCommand>
					LCD_enuWriteString(Translatation[L_iter]);	
 1e4:	f8 01       	movw	r30, r16
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	e0 5a       	subi	r30, 0xA0	; 160
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	80 81       	ld	r24, Z
 1f0:	91 81       	ldd	r25, Z+1	; 0x01
 1f2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_enuWriteString>
			}else{continue;}
			if(flag == 5)
			{
				if(temp != L_iter)
				{
					temp = L_iter;
 1f6:	6c 2f       	mov	r22, r28
{
	u8 L_iter;
	u8 flag=0;
	u8 temp=50;
	
		for(L_iter=0;L_iter<MAX_WORDS;L_iter++)
 1f8:	cf 5f       	subi	r28, 0xFF	; 255
 1fa:	c6 30       	cpi	r28, 0x06	; 6
 1fc:	08 f4       	brcc	.+2      	; 0x200 <Print_TranslatedGesture+0x16e>
 1fe:	4f cf       	rjmp	.-354    	; 0x9e <Print_TranslatedGesture+0xc>
					LCD_enuWriteCommand(0x01);
					LCD_enuWriteString(Translatation[L_iter]);	
				}else{}
			}else{}
		}
		asm("SEI");
 200:	78 94       	sei
}
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <main>:

void Print_TranslatedGesture(void);

int main(void)
{
	LCD_enuInit();
 20a:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_enuInit>
	ADC_Callback((&thumb),(&indexfinger),(&middle),(&ring),(&pinky),Print_TranslatedGesture);
 20e:	0f 2e       	mov	r0, r31
 210:	f9 e4       	ldi	r31, 0x49	; 73
 212:	ef 2e       	mov	r14, r31
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ff 2e       	mov	r15, r31
 218:	f0 2d       	mov	r31, r0
 21a:	0e e2       	ldi	r16, 0x2E	; 46
 21c:	11 e0       	ldi	r17, 0x01	; 1
 21e:	20 e3       	ldi	r18, 0x30	; 48
 220:	31 e0       	ldi	r19, 0x01	; 1
 222:	4a e2       	ldi	r20, 0x2A	; 42
 224:	51 e0       	ldi	r21, 0x01	; 1
 226:	6c e2       	ldi	r22, 0x2C	; 44
 228:	71 e0       	ldi	r23, 0x01	; 1
 22a:	82 e3       	ldi	r24, 0x32	; 50
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 06 03 	call	0x60c	; 0x60c <ADC_Callback>
	ADC_Init();
 232:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <ADC_Init>
	asm("SEI");
 236:	78 94       	sei
	ADC_Start();
 238:	0e 94 02 03 	call	0x604	; 0x604 <ADC_Start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	84 e3       	ldi	r24, 0x34	; 52
 240:	9c e0       	ldi	r25, 0x0C	; 12
 242:	21 50       	subi	r18, 0x01	; 1
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x38>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0x42>
 24c:	00 00       	nop
	//Print_TranslatedGesture();
	while(1)
	{
		_delay_ms(250);
		LCD_enuWriteCommand(0x01);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 39 02 	call	0x472	; 0x472 <LCD_enuWriteCommand>
		LCD_enuGoToPosition(1,1);
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_enuGoToPosition>
		LCD_enuWriteIntegerNum(thumb);
 25c:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <thumb>
 260:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <thumb+0x1>
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_enuWriteIntegerNum>
		LCD_enuWriteData(' ');
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_enuWriteData>
		LCD_enuWriteIntegerNum(indexfinger);
 272:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <indexfinger>
 276:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <indexfinger+0x1>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_enuWriteIntegerNum>
		LCD_enuWriteData(' ');
 282:	80 e2       	ldi	r24, 0x20	; 32
 284:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_enuWriteData>
		LCD_enuWriteIntegerNum(middle);
 288:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <middle>
 28c:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <middle+0x1>
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_enuWriteIntegerNum>
		LCD_enuWriteData(' ');
 298:	80 e2       	ldi	r24, 0x20	; 32
 29a:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_enuWriteData>
		LCD_enuGoToPosition(2,1);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_enuGoToPosition>
		LCD_enuWriteIntegerNum(ring);
 2a6:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <ring>
 2aa:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <ring+0x1>
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_enuWriteIntegerNum>
		LCD_enuWriteData(' ');
 2b6:	80 e2       	ldi	r24, 0x20	; 32
 2b8:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_enuWriteData>
		LCD_enuWriteIntegerNum(pinky);
 2bc:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <pinky>
 2c0:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <pinky+0x1>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_enuWriteIntegerNum>
 2cc:	b7 cf       	rjmp	.-146    	; 0x23c <main+0x32>

000002ce <LCD_enuLatch>:
		LCD_enuWriteIntegerNum(Local_s32DecimalVal);
		
		Local_u8ErrorState = ES_OK;
	}
	return Local_u8ErrorState;
}
 2ce:	cf 93       	push	r28
 2d0:	c8 2f       	mov	r28, r24
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	8c e0       	ldi	r24, 0x0C	; 12
 2d6:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	8d e0       	ldi	r24, 0x0D	; 13
 2de:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 2e2:	6c 2f       	mov	r22, r28
 2e4:	66 1f       	adc	r22, r22
 2e6:	66 27       	eor	r22, r22
 2e8:	66 1f       	adc	r22, r22
 2ea:	81 e1       	ldi	r24, 0x11	; 17
 2ec:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 2f0:	c6 fb       	bst	r28, 6
 2f2:	66 27       	eor	r22, r22
 2f4:	60 f9       	bld	r22, 0
 2f6:	80 e1       	ldi	r24, 0x10	; 16
 2f8:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 2fc:	c5 fb       	bst	r28, 5
 2fe:	66 27       	eor	r22, r22
 300:	60 f9       	bld	r22, 0
 302:	8f e0       	ldi	r24, 0x0F	; 15
 304:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 308:	c4 fb       	bst	r28, 4
 30a:	66 27       	eor	r22, r22
 30c:	60 f9       	bld	r22, 0
 30e:	8e e0       	ldi	r24, 0x0E	; 14
 310:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	8d e0       	ldi	r24, 0x0D	; 13
 318:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 31c:	8f e3       	ldi	r24, 0x3F	; 63
 31e:	9c e9       	ldi	r25, 0x9C	; 156
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_enuLatch+0x52>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_enuLatch+0x58>
 326:	00 00       	nop
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	8d e0       	ldi	r24, 0x0D	; 13
 32c:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 330:	8f e3       	ldi	r24, 0x3F	; 63
 332:	9c e9       	ldi	r25, 0x9C	; 156
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD_enuLatch+0x66>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_enuLatch+0x6c>
 33a:	00 00       	nop
 33c:	c3 fb       	bst	r28, 3
 33e:	66 27       	eor	r22, r22
 340:	60 f9       	bld	r22, 0
 342:	81 e1       	ldi	r24, 0x11	; 17
 344:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 348:	c2 fb       	bst	r28, 2
 34a:	66 27       	eor	r22, r22
 34c:	60 f9       	bld	r22, 0
 34e:	80 e1       	ldi	r24, 0x10	; 16
 350:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 354:	c1 fb       	bst	r28, 1
 356:	66 27       	eor	r22, r22
 358:	60 f9       	bld	r22, 0
 35a:	8f e0       	ldi	r24, 0x0F	; 15
 35c:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 360:	6c 2f       	mov	r22, r28
 362:	61 70       	andi	r22, 0x01	; 1
 364:	8e e0       	ldi	r24, 0x0E	; 14
 366:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	8d e0       	ldi	r24, 0x0D	; 13
 36e:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 372:	8f e1       	ldi	r24, 0x1F	; 31
 374:	9e e4       	ldi	r25, 0x4E	; 78
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <LCD_enuLatch+0xa8>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_enuLatch+0xae>
 37c:	00 00       	nop
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	8d e0       	ldi	r24, 0x0D	; 13
 382:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 386:	8f e1       	ldi	r24, 0x1F	; 31
 388:	9e e4       	ldi	r25, 0x4E	; 78
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_enuLatch+0xbc>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_enuLatch+0xc2>
 390:	00 00       	nop
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <LCD_enuInit>:
 398:	2f e7       	ldi	r18, 0x7F	; 127
 39a:	85 eb       	ldi	r24, 0xB5	; 181
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <LCD_enuInit+0x6>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_enuInit+0x10>
 3a8:	00 00       	nop
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	8b e0       	ldi	r24, 0x0B	; 11
 3ae:	0e 94 83 03 	call	0x706	; 0x706 <M_DIO_enuSetPinDirection>
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	8c e0       	ldi	r24, 0x0C	; 12
 3b6:	0e 94 83 03 	call	0x706	; 0x706 <M_DIO_enuSetPinDirection>
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	8d e0       	ldi	r24, 0x0D	; 13
 3be:	0e 94 83 03 	call	0x706	; 0x706 <M_DIO_enuSetPinDirection>
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	81 e1       	ldi	r24, 0x11	; 17
 3c6:	0e 94 83 03 	call	0x706	; 0x706 <M_DIO_enuSetPinDirection>
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	80 e1       	ldi	r24, 0x10	; 16
 3ce:	0e 94 83 03 	call	0x706	; 0x706 <M_DIO_enuSetPinDirection>
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	8f e0       	ldi	r24, 0x0F	; 15
 3d6:	0e 94 83 03 	call	0x706	; 0x706 <M_DIO_enuSetPinDirection>
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	8e e0       	ldi	r24, 0x0E	; 14
 3de:	0e 94 83 03 	call	0x706	; 0x706 <M_DIO_enuSetPinDirection>
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	8b e0       	ldi	r24, 0x0B	; 11
 3e6:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	81 e1       	ldi	r24, 0x11	; 17
 3ee:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	80 e1       	ldi	r24, 0x10	; 16
 3f6:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	8f e0       	ldi	r24, 0x0F	; 15
 3fe:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	8e e0       	ldi	r24, 0x0E	; 14
 406:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	8d e0       	ldi	r24, 0x0D	; 13
 40e:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 412:	8f e1       	ldi	r24, 0x1F	; 31
 414:	9e e4       	ldi	r25, 0x4E	; 78
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	8d e0       	ldi	r24, 0x0D	; 13
 422:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 426:	8f e1       	ldi	r24, 0x1F	; 31
 428:	9e e4       	ldi	r25, 0x4E	; 78
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 430:	00 00       	nop
 432:	88 e2       	ldi	r24, 0x28	; 40
 434:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_enuLatch>
 438:	8f e9       	ldi	r24, 0x9F	; 159
 43a:	9f e0       	ldi	r25, 0x0F	; 15
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 442:	00 00       	nop
 444:	8c e0       	ldi	r24, 0x0C	; 12
 446:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_enuLatch>
 44a:	8f e9       	ldi	r24, 0x9F	; 159
 44c:	9f e0       	ldi	r25, 0x0F	; 15
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 454:	00 00       	nop
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_enuLatch>
 45c:	8f e3       	ldi	r24, 0x3F	; 63
 45e:	9f e1       	ldi	r25, 0x1F	; 31
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 466:	00 00       	nop
 468:	86 e0       	ldi	r24, 0x06	; 6
 46a:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_enuLatch>
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	08 95       	ret

00000472 <LCD_enuWriteCommand>:
 472:	cf 93       	push	r28
 474:	c8 2f       	mov	r28, r24
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	8b e0       	ldi	r24, 0x0B	; 11
 47a:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	8c e0       	ldi	r24, 0x0C	; 12
 482:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	8d e0       	ldi	r24, 0x0D	; 13
 48a:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 48e:	8c 2f       	mov	r24, r28
 490:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_enuLatch>
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <LCD_enuWriteData>:
 49a:	cf 93       	push	r28
 49c:	c8 2f       	mov	r28, r24
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	8b e0       	ldi	r24, 0x0B	; 11
 4a2:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	8c e0       	ldi	r24, 0x0C	; 12
 4aa:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	8d e0       	ldi	r24, 0x0D	; 13
 4b2:	0e 94 16 04 	call	0x82c	; 0x82c <M_DIO_enuSetPinValue>
 4b6:	8c 2f       	mov	r24, r28
 4b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_enuLatch>
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <LCD_enuWriteString>:
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	00 97       	sbiw	r24, 0x00	; 0
 4ca:	31 f4       	brne	.+12     	; 0x4d8 <LCD_enuWriteString+0x16>
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	0d c0       	rjmp	.+26     	; 0x4ea <LCD_enuWriteString+0x28>
 4d0:	cf 5f       	subi	r28, 0xFF	; 255
 4d2:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_enuWriteData>
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <LCD_enuWriteString+0x1a>
 4d8:	8c 01       	movw	r16, r24
 4da:	c0 e0       	ldi	r28, 0x00	; 0
 4dc:	f8 01       	movw	r30, r16
 4de:	ec 0f       	add	r30, r28
 4e0:	f1 1d       	adc	r31, r1
 4e2:	80 81       	ld	r24, Z
 4e4:	81 11       	cpse	r24, r1
 4e6:	f4 cf       	rjmp	.-24     	; 0x4d0 <LCD_enuWriteString+0xe>
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	08 95       	ret

000004f2 <LCD_enuWriteIntegerNum>:
 4f2:	cf 92       	push	r12
 4f4:	df 92       	push	r13
 4f6:	ef 92       	push	r14
 4f8:	ff 92       	push	r15
 4fa:	0f 93       	push	r16
 4fc:	1f 93       	push	r17
 4fe:	cf 93       	push	r28
 500:	8b 01       	movw	r16, r22
 502:	9c 01       	movw	r18, r24
 504:	67 2b       	or	r22, r23
 506:	68 2b       	or	r22, r24
 508:	69 2b       	or	r22, r25
 50a:	51 f5       	brne	.+84     	; 0x560 <LCD_enuWriteIntegerNum+0x6e>
 50c:	80 e3       	ldi	r24, 0x30	; 48
 50e:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_enuWriteData>
 512:	45 c0       	rjmp	.+138    	; 0x59e <LCD_enuWriteIntegerNum+0xac>
 514:	cf 5f       	subi	r28, 0xFF	; 255
 516:	dc 01       	movw	r26, r24
 518:	cb 01       	movw	r24, r22
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	aa 1f       	adc	r26, r26
 520:	bb 1f       	adc	r27, r27
 522:	6c 01       	movw	r12, r24
 524:	7d 01       	movw	r14, r26
 526:	cc 0c       	add	r12, r12
 528:	dd 1c       	adc	r13, r13
 52a:	ee 1c       	adc	r14, r14
 52c:	ff 1c       	adc	r15, r15
 52e:	cc 0c       	add	r12, r12
 530:	dd 1c       	adc	r13, r13
 532:	ee 1c       	adc	r14, r14
 534:	ff 1c       	adc	r15, r15
 536:	c8 0e       	add	r12, r24
 538:	d9 1e       	adc	r13, r25
 53a:	ea 1e       	adc	r14, r26
 53c:	fb 1e       	adc	r15, r27
 53e:	c9 01       	movw	r24, r18
 540:	b8 01       	movw	r22, r16
 542:	2a e0       	ldi	r18, 0x0A	; 10
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__udivmodsi4>
 54e:	6c 0d       	add	r22, r12
 550:	7d 1d       	adc	r23, r13
 552:	8e 1d       	adc	r24, r14
 554:	9f 1d       	adc	r25, r15
 556:	02 2f       	mov	r16, r18
 558:	13 2f       	mov	r17, r19
 55a:	24 2f       	mov	r18, r20
 55c:	35 2f       	mov	r19, r21
 55e:	04 c0       	rjmp	.+8      	; 0x568 <LCD_enuWriteIntegerNum+0x76>
 560:	c0 e0       	ldi	r28, 0x00	; 0
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	cb 01       	movw	r24, r22
 568:	01 15       	cp	r16, r1
 56a:	11 05       	cpc	r17, r1
 56c:	21 05       	cpc	r18, r1
 56e:	31 05       	cpc	r19, r1
 570:	89 f6       	brne	.-94     	; 0x514 <LCD_enuWriteIntegerNum+0x22>
 572:	13 c0       	rjmp	.+38     	; 0x59a <LCD_enuWriteIntegerNum+0xa8>
 574:	2a e0       	ldi	r18, 0x0A	; 10
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	40 e0       	ldi	r20, 0x00	; 0
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__udivmodsi4>
 580:	e2 2e       	mov	r14, r18
 582:	f3 2e       	mov	r15, r19
 584:	04 2f       	mov	r16, r20
 586:	15 2f       	mov	r17, r21
 588:	80 e3       	ldi	r24, 0x30	; 48
 58a:	86 0f       	add	r24, r22
 58c:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_enuWriteData>
 590:	6e 2d       	mov	r22, r14
 592:	7f 2d       	mov	r23, r15
 594:	80 2f       	mov	r24, r16
 596:	91 2f       	mov	r25, r17
 598:	c1 50       	subi	r28, 0x01	; 1
 59a:	c1 11       	cpse	r28, r1
 59c:	eb cf       	rjmp	.-42     	; 0x574 <LCD_enuWriteIntegerNum+0x82>
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	ff 90       	pop	r15
 5a8:	ef 90       	pop	r14
 5aa:	df 90       	pop	r13
 5ac:	cf 90       	pop	r12
 5ae:	08 95       	ret

000005b0 <LCD_enuGoToPosition>:
ES_t LCD_enuGoToPosition(u8 Copy_u8Row, u8 Copy_u8Column)
{
	u8 Local_u8ErrorState = ES_NOK;
	if(Copy_u8Row<=2 && Copy_u8Column<=16)
 5b0:	83 30       	cpi	r24, 0x03	; 3
 5b2:	98 f4       	brcc	.+38     	; 0x5da <LCD_enuGoToPosition+0x2a>
 5b4:	61 31       	cpi	r22, 0x11	; 17
 5b6:	98 f4       	brcc	.+38     	; 0x5de <LCD_enuGoToPosition+0x2e>
	{
		switch(Copy_u8Row)
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	19 f0       	breq	.+6      	; 0x5c2 <LCD_enuGoToPosition+0x12>
 5bc:	82 30       	cpi	r24, 0x02	; 2
 5be:	39 f0       	breq	.+14     	; 0x5ce <LCD_enuGoToPosition+0x1e>
 5c0:	10 c0       	rjmp	.+32     	; 0x5e2 <LCD_enuGoToPosition+0x32>
		{
			case  1 :
			LCD_enuWriteCommand((0x80)+Copy_u8Column-1);
 5c2:	8f e7       	ldi	r24, 0x7F	; 127
 5c4:	86 0f       	add	r24, r22
 5c6:	0e 94 39 02 	call	0x472	; 0x472 <LCD_enuWriteCommand>
			Local_u8ErrorState = ES_OK;
 5ca:	81 e0       	ldi	r24, 0x01	; 1
			break;
 5cc:	08 95       	ret
			case 2 :
			LCD_enuWriteCommand((0xC0)+Copy_u8Column-1);
 5ce:	8f eb       	ldi	r24, 0xBF	; 191
 5d0:	86 0f       	add	r24, r22
 5d2:	0e 94 39 02 	call	0x472	; 0x472 <LCD_enuWriteCommand>
			Local_u8ErrorState = ES_OK;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
			break;
 5d8:	08 95       	ret
			Local_u8ErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	08 95       	ret
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	08 95       	ret
			case 2 :
			LCD_enuWriteCommand((0xC0)+Copy_u8Column-1);
			Local_u8ErrorState = ES_OK;
			break;
			default:
			Local_u8ErrorState = ES_OUT_OF_RANGE;
 5e2:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		Local_u8ErrorState = ES_OUT_OF_RANGE;
	}
	return Local_u8ErrorState;
}
 5e4:	08 95       	ret

000005e6 <ADC_Init>:
{
	u16 adcread=0;
	while(!(GET_BIT(ADCSRA,ADIF)));
	adcread= ADC;
	return adcread;
}
 5e6:	86 b1       	in	r24, 0x06	; 6
 5e8:	80 68       	ori	r24, 0x80	; 128
 5ea:	86 b9       	out	0x06, r24	; 6
 5ec:	86 b1       	in	r24, 0x06	; 6
 5ee:	80 64       	ori	r24, 0x40	; 64
 5f0:	86 b9       	out	0x06, r24	; 6
 5f2:	83 e4       	ldi	r24, 0x43	; 67
 5f4:	87 b9       	out	0x07, r24	; 7
 5f6:	86 b1       	in	r24, 0x06	; 6
 5f8:	87 60       	ori	r24, 0x07	; 7
 5fa:	86 b9       	out	0x06, r24	; 6
 5fc:	86 b1       	in	r24, 0x06	; 6
 5fe:	88 60       	ori	r24, 0x08	; 8
 600:	86 b9       	out	0x06, r24	; 6
 602:	08 95       	ret

00000604 <ADC_Start>:
 604:	86 b1       	in	r24, 0x06	; 6
 606:	80 64       	ori	r24, 0x40	; 64
 608:	86 b9       	out	0x06, r24	; 6
 60a:	08 95       	ret

0000060c <ADC_Callback>:
void ADC_Callback(u16 *pApAppFunParameter0,u16 *pApAppFunParameter1,u16 *pApAppFunParameter2,u16 *pApAppFunParameter3,u16 *pApAppFunParameter4,void (*pAppFun)(void))
{
 60c:	0f 93       	push	r16
 60e:	1f 93       	push	r17
	ADC_thumb = pApAppFunParameter0;
 610:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <ADC_thumb+0x1>
 614:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <ADC_thumb>
	ADC_indexfinger  = pApAppFunParameter1;
 618:	70 93 f5 00 	sts	0x00F5, r23	; 0x8000f5 <ADC_indexfinger+0x1>
 61c:	60 93 f4 00 	sts	0x00F4, r22	; 0x8000f4 <ADC_indexfinger>
	ADC_middle  = pApAppFunParameter2;
 620:	50 93 f3 00 	sts	0x00F3, r21	; 0x8000f3 <ADC_middle+0x1>
 624:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <ADC_middle>
	ADC_ring  = pApAppFunParameter3;
 628:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <ADC_ring+0x1>
 62c:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <ADC_ring>
	ADC_pinky  = pApAppFunParameter4;
 630:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__data_end+0x1>
 634:	00 93 ee 00 	sts	0x00EE, r16	; 0x8000ee <__data_end>
	ADC_AppFun = pAppFun;
	
}
 638:	1f 91       	pop	r17
 63a:	0f 91       	pop	r16
 63c:	08 95       	ret

0000063e <__vector_16>:
ISR(ADC_vect_16)
{
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	8f 93       	push	r24
 64a:	9f 93       	push	r25
 64c:	ef 93       	push	r30
 64e:	ff 93       	push	r31
	static u8 channel=ADC_Channel0;
	switch(channel)
 650:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <channel.1691>
 654:	85 34       	cpi	r24, 0x45	; 69
 656:	29 f1       	breq	.+74     	; 0x6a2 <__vector_16+0x64>
 658:	28 f4       	brcc	.+10     	; 0x664 <__vector_16+0x26>
 65a:	83 34       	cpi	r24, 0x43	; 67
 65c:	41 f0       	breq	.+16     	; 0x66e <__vector_16+0x30>
 65e:	84 34       	cpi	r24, 0x44	; 68
 660:	99 f0       	breq	.+38     	; 0x688 <__vector_16+0x4a>
 662:	45 c0       	rjmp	.+138    	; 0x6ee <__vector_16+0xb0>
 664:	86 34       	cpi	r24, 0x46	; 70
 666:	51 f1       	breq	.+84     	; 0x6bc <__vector_16+0x7e>
 668:	87 34       	cpi	r24, 0x47	; 71
 66a:	a9 f1       	breq	.+106    	; 0x6d6 <__vector_16+0x98>
 66c:	40 c0       	rjmp	.+128    	; 0x6ee <__vector_16+0xb0>
	{
		case ADC_Channel0: 
		*ADC_thumb=ADC;
 66e:	e0 91 f6 00 	lds	r30, 0x00F6	; 0x8000f6 <ADC_thumb>
 672:	f0 91 f7 00 	lds	r31, 0x00F7	; 0x8000f7 <ADC_thumb+0x1>
 676:	84 b1       	in	r24, 0x04	; 4
 678:	95 b1       	in	r25, 0x05	; 5
 67a:	91 83       	std	Z+1, r25	; 0x01
 67c:	80 83       	st	Z, r24
		ADMUX = ADC_Channel1;
 67e:	84 e4       	ldi	r24, 0x44	; 68
 680:	87 b9       	out	0x07, r24	; 7
		channel=ADC_Channel1;
 682:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <channel.1691>
		break;
 686:	33 c0       	rjmp	.+102    	; 0x6ee <__vector_16+0xb0>
		case ADC_Channel1:
		*ADC_indexfinger=ADC;
 688:	e0 91 f4 00 	lds	r30, 0x00F4	; 0x8000f4 <ADC_indexfinger>
 68c:	f0 91 f5 00 	lds	r31, 0x00F5	; 0x8000f5 <ADC_indexfinger+0x1>
 690:	84 b1       	in	r24, 0x04	; 4
 692:	95 b1       	in	r25, 0x05	; 5
 694:	91 83       	std	Z+1, r25	; 0x01
 696:	80 83       	st	Z, r24
		ADMUX = ADC_Channel2;
 698:	85 e4       	ldi	r24, 0x45	; 69
 69a:	87 b9       	out	0x07, r24	; 7
		channel=ADC_Channel2;
 69c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <channel.1691>
		break;
 6a0:	26 c0       	rjmp	.+76     	; 0x6ee <__vector_16+0xb0>
		case ADC_Channel2:
		*ADC_middle=ADC;
 6a2:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <ADC_middle>
 6a6:	f0 91 f3 00 	lds	r31, 0x00F3	; 0x8000f3 <ADC_middle+0x1>
 6aa:	84 b1       	in	r24, 0x04	; 4
 6ac:	95 b1       	in	r25, 0x05	; 5
 6ae:	91 83       	std	Z+1, r25	; 0x01
 6b0:	80 83       	st	Z, r24
		ADMUX = ADC_Channel3;
 6b2:	86 e4       	ldi	r24, 0x46	; 70
 6b4:	87 b9       	out	0x07, r24	; 7
		channel=ADC_Channel3;
 6b6:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <channel.1691>
		break;
 6ba:	19 c0       	rjmp	.+50     	; 0x6ee <__vector_16+0xb0>
		case ADC_Channel3:
		*ADC_ring=ADC;
 6bc:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <ADC_ring>
 6c0:	f0 91 f1 00 	lds	r31, 0x00F1	; 0x8000f1 <ADC_ring+0x1>
 6c4:	84 b1       	in	r24, 0x04	; 4
 6c6:	95 b1       	in	r25, 0x05	; 5
 6c8:	91 83       	std	Z+1, r25	; 0x01
 6ca:	80 83       	st	Z, r24
		ADMUX = ADC_Channel4;
 6cc:	87 e4       	ldi	r24, 0x47	; 71
 6ce:	87 b9       	out	0x07, r24	; 7
		channel=ADC_Channel4;
 6d0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <channel.1691>
		break;
 6d4:	0c c0       	rjmp	.+24     	; 0x6ee <__vector_16+0xb0>
		case ADC_Channel4:
		*ADC_pinky=ADC;
 6d6:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <__data_end>
 6da:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <__data_end+0x1>
 6de:	84 b1       	in	r24, 0x04	; 4
 6e0:	95 b1       	in	r25, 0x05	; 5
 6e2:	91 83       	std	Z+1, r25	; 0x01
 6e4:	80 83       	st	Z, r24
		//asm("CLI");
		ADMUX = ADC_Channel0;
 6e6:	83 e4       	ldi	r24, 0x43	; 67
 6e8:	87 b9       	out	0x07, r24	; 7
		channel=ADC_Channel0;
 6ea:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <channel.1691>
		//ADC_AppFun();
		break;
	}
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADSC);	
 6ee:	86 b1       	in	r24, 0x06	; 6
 6f0:	80 64       	ori	r24, 0x40	; 64
 6f2:	86 b9       	out	0x06, r24	; 6
 6f4:	ff 91       	pop	r31
 6f6:	ef 91       	pop	r30
 6f8:	9f 91       	pop	r25
 6fa:	8f 91       	pop	r24
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <M_DIO_enuSetPinDirection>:
#include "DIO_Config.h"
#include "DIO_Private.h"

ES_t M_DIO_enuSetPinDirection(PortPin_t Copy_enuPxy,Direction_t Copy_enuDirection)
{
	if(Copy_enuDirection <= DIO_Output)
 706:	62 30       	cpi	r22, 0x02	; 2
 708:	08 f0       	brcs	.+2      	; 0x70c <M_DIO_enuSetPinDirection+0x6>
 70a:	88 c0       	rjmp	.+272    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	{
		u8 Local_u8Port=Copy_enuPxy/10;
 70c:	9d ec       	ldi	r25, 0xCD	; 205
 70e:	89 9f       	mul	r24, r25
 710:	91 2d       	mov	r25, r1
 712:	11 24       	eor	r1, r1
 714:	96 95       	lsr	r25
 716:	96 95       	lsr	r25
 718:	96 95       	lsr	r25
		u8 Local_u8Pin=Copy_enuPxy%10;
 71a:	39 2f       	mov	r19, r25
 71c:	33 0f       	add	r19, r19
 71e:	23 2f       	mov	r18, r19
 720:	22 0f       	add	r18, r18
 722:	22 0f       	add	r18, r18
 724:	23 0f       	add	r18, r19
 726:	82 1b       	sub	r24, r18
 728:	28 2f       	mov	r18, r24
		switch(Copy_enuDirection)
 72a:	66 23       	and	r22, r22
 72c:	19 f0       	breq	.+6      	; 0x734 <M_DIO_enuSetPinDirection+0x2e>
 72e:	61 30       	cpi	r22, 0x01	; 1
 730:	e9 f1       	breq	.+122    	; 0x7ac <M_DIO_enuSetPinDirection+0xa6>
 732:	76 c0       	rjmp	.+236    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		{
			case DIO_Input:
			switch(Local_u8Port)
 734:	91 30       	cpi	r25, 0x01	; 1
 736:	99 f0       	breq	.+38     	; 0x75e <M_DIO_enuSetPinDirection+0x58>
 738:	28 f0       	brcs	.+10     	; 0x744 <M_DIO_enuSetPinDirection+0x3e>
 73a:	92 30       	cpi	r25, 0x02	; 2
 73c:	e9 f0       	breq	.+58     	; 0x778 <M_DIO_enuSetPinDirection+0x72>
 73e:	93 30       	cpi	r25, 0x03	; 3
 740:	41 f1       	breq	.+80     	; 0x792 <M_DIO_enuSetPinDirection+0x8c>
 742:	70 c0       	rjmp	.+224    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
			{
				case A:
				CLR_BIT(DDRA,Local_u8Pin);
 744:	3a b3       	in	r19, 0x1a	; 26
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	02 c0       	rjmp	.+4      	; 0x750 <M_DIO_enuSetPinDirection+0x4a>
 74c:	88 0f       	add	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	2a 95       	dec	r18
 752:	e2 f7       	brpl	.-8      	; 0x74c <M_DIO_enuSetPinDirection+0x46>
 754:	80 95       	com	r24
 756:	83 23       	and	r24, r19
 758:	8a bb       	out	0x1a, r24	; 26
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 75a:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_Input:
			switch(Local_u8Port)
			{
				case A:
				CLR_BIT(DDRA,Local_u8Pin);
				break;
 75c:	08 95       	ret
				case B:
				CLR_BIT(DDRB,Local_u8Pin);
 75e:	37 b3       	in	r19, 0x17	; 23
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <M_DIO_enuSetPinDirection+0x64>
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	2a 95       	dec	r18
 76c:	e2 f7       	brpl	.-8      	; 0x766 <M_DIO_enuSetPinDirection+0x60>
 76e:	80 95       	com	r24
 770:	83 23       	and	r24, r19
 772:	87 bb       	out	0x17, r24	; 23
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 774:	81 e0       	ldi	r24, 0x01	; 1
				case A:
				CLR_BIT(DDRA,Local_u8Pin);
				break;
				case B:
				CLR_BIT(DDRB,Local_u8Pin);
				break;
 776:	08 95       	ret
				case C:
				CLR_BIT(DDRC,Local_u8Pin);
 778:	34 b3       	in	r19, 0x14	; 20
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	02 c0       	rjmp	.+4      	; 0x784 <M_DIO_enuSetPinDirection+0x7e>
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	2a 95       	dec	r18
 786:	e2 f7       	brpl	.-8      	; 0x780 <M_DIO_enuSetPinDirection+0x7a>
 788:	80 95       	com	r24
 78a:	83 23       	and	r24, r19
 78c:	84 bb       	out	0x14, r24	; 20
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 78e:	81 e0       	ldi	r24, 0x01	; 1
				case B:
				CLR_BIT(DDRB,Local_u8Pin);
				break;
				case C:
				CLR_BIT(DDRC,Local_u8Pin);
				break;
 790:	08 95       	ret
				case D:
				CLR_BIT(DDRD,Local_u8Pin);
 792:	31 b3       	in	r19, 0x11	; 17
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	02 c0       	rjmp	.+4      	; 0x79e <M_DIO_enuSetPinDirection+0x98>
 79a:	88 0f       	add	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	2a 95       	dec	r18
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <M_DIO_enuSetPinDirection+0x94>
 7a2:	80 95       	com	r24
 7a4:	83 23       	and	r24, r19
 7a6:	81 bb       	out	0x11, r24	; 17
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 7a8:	81 e0       	ldi	r24, 0x01	; 1
				case C:
				CLR_BIT(DDRC,Local_u8Pin);
				break;
				case D:
				CLR_BIT(DDRD,Local_u8Pin);
				break;
 7aa:	08 95       	ret
				default:return ES_OUT_OF_RANGE;
				break;
			}
			break;
			case DIO_Output:
			switch(Local_u8Port)
 7ac:	91 30       	cpi	r25, 0x01	; 1
 7ae:	91 f0       	breq	.+36     	; 0x7d4 <M_DIO_enuSetPinDirection+0xce>
 7b0:	28 f0       	brcs	.+10     	; 0x7bc <M_DIO_enuSetPinDirection+0xb6>
 7b2:	92 30       	cpi	r25, 0x02	; 2
 7b4:	d9 f0       	breq	.+54     	; 0x7ec <M_DIO_enuSetPinDirection+0xe6>
 7b6:	93 30       	cpi	r25, 0x03	; 3
 7b8:	29 f1       	breq	.+74     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7ba:	36 c0       	rjmp	.+108    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
			{
				case A:
				SET_BIT(DDRA,Local_u8Pin);
 7bc:	3a b3       	in	r19, 0x1a	; 26
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <M_DIO_enuSetPinDirection+0xc2>
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	2a 95       	dec	r18
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <M_DIO_enuSetPinDirection+0xbe>
 7cc:	83 2b       	or	r24, r19
 7ce:	8a bb       	out	0x1a, r24	; 26
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_Output:
			switch(Local_u8Port)
			{
				case A:
				SET_BIT(DDRA,Local_u8Pin);
				break;
 7d2:	08 95       	ret
				case B:
				SET_BIT(DDRB,Local_u8Pin);
 7d4:	37 b3       	in	r19, 0x17	; 23
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <M_DIO_enuSetPinDirection+0xda>
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	2a 95       	dec	r18
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <M_DIO_enuSetPinDirection+0xd6>
 7e4:	83 2b       	or	r24, r19
 7e6:	87 bb       	out	0x17, r24	; 23
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 7e8:	81 e0       	ldi	r24, 0x01	; 1
				case A:
				SET_BIT(DDRA,Local_u8Pin);
				break;
				case B:
				SET_BIT(DDRB,Local_u8Pin);
				break;
 7ea:	08 95       	ret
				case C:
				SET_BIT(DDRC,Local_u8Pin);
 7ec:	34 b3       	in	r19, 0x14	; 20
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <M_DIO_enuSetPinDirection+0xf2>
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	2a 95       	dec	r18
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <M_DIO_enuSetPinDirection+0xee>
 7fc:	83 2b       	or	r24, r19
 7fe:	84 bb       	out	0x14, r24	; 20
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 800:	81 e0       	ldi	r24, 0x01	; 1
				case B:
				SET_BIT(DDRB,Local_u8Pin);
				break;
				case C:
				SET_BIT(DDRC,Local_u8Pin);
				break;
 802:	08 95       	ret
				case D:
				SET_BIT(DDRD,Local_u8Pin);
 804:	31 b3       	in	r19, 0x11	; 17
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	2a 95       	dec	r18
 812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 814:	83 2b       	or	r24, r19
 816:	81 bb       	out	0x11, r24	; 17
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 818:	81 e0       	ldi	r24, 0x01	; 1
				case C:
				SET_BIT(DDRC,Local_u8Pin);
				break;
				case D:
				SET_BIT(DDRD,Local_u8Pin);
				break;
 81a:	08 95       	ret
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
	}else
	{
		return ES_OUT_OF_RANGE;
 81c:	82 e0       	ldi	r24, 0x02	; 2
 81e:	08 95       	ret
				break;
				default:return ES_OUT_OF_RANGE;
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
 820:	82 e0       	ldi	r24, 0x02	; 2
 822:	08 95       	ret
				CLR_BIT(DDRC,Local_u8Pin);
				break;
				case D:
				CLR_BIT(DDRD,Local_u8Pin);
				break;
				default:return ES_OUT_OF_RANGE;
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	08 95       	ret
				SET_BIT(DDRC,Local_u8Pin);
				break;
				case D:
				SET_BIT(DDRD,Local_u8Pin);
				break;
				default:return ES_OUT_OF_RANGE;
 828:	82 e0       	ldi	r24, 0x02	; 2
		return ES_OK;
	}else
	{
		return ES_OUT_OF_RANGE;
	}
}
 82a:	08 95       	ret

0000082c <M_DIO_enuSetPinValue>:
ES_t M_DIO_enuSetPinValue(PortPin_t Copy_enuPxy,Logic_t Copy_enuState)
{
	if(Copy_enuState <= DIO_High)
 82c:	62 30       	cpi	r22, 0x02	; 2
 82e:	08 f0       	brcs	.+2      	; 0x832 <M_DIO_enuSetPinValue+0x6>
 830:	88 c0       	rjmp	.+272    	; 0x942 <__stack+0xe3>
	{
		u8 Local_u8Port=Copy_enuPxy/10;
 832:	9d ec       	ldi	r25, 0xCD	; 205
 834:	89 9f       	mul	r24, r25
 836:	91 2d       	mov	r25, r1
 838:	11 24       	eor	r1, r1
 83a:	96 95       	lsr	r25
 83c:	96 95       	lsr	r25
 83e:	96 95       	lsr	r25
		u8 Local_u8Pin=Copy_enuPxy%10;
 840:	39 2f       	mov	r19, r25
 842:	33 0f       	add	r19, r19
 844:	23 2f       	mov	r18, r19
 846:	22 0f       	add	r18, r18
 848:	22 0f       	add	r18, r18
 84a:	23 0f       	add	r18, r19
 84c:	82 1b       	sub	r24, r18
 84e:	28 2f       	mov	r18, r24
		switch(Copy_enuState)
 850:	66 23       	and	r22, r22
 852:	19 f0       	breq	.+6      	; 0x85a <M_DIO_enuSetPinValue+0x2e>
 854:	61 30       	cpi	r22, 0x01	; 1
 856:	e9 f1       	breq	.+122    	; 0x8d2 <__stack+0x73>
 858:	76 c0       	rjmp	.+236    	; 0x946 <__stack+0xe7>
		{
			case DIO_Low:
			switch(Local_u8Port)
 85a:	91 30       	cpi	r25, 0x01	; 1
 85c:	99 f0       	breq	.+38     	; 0x884 <__stack+0x25>
 85e:	28 f0       	brcs	.+10     	; 0x86a <__stack+0xb>
 860:	92 30       	cpi	r25, 0x02	; 2
 862:	e9 f0       	breq	.+58     	; 0x89e <__stack+0x3f>
 864:	93 30       	cpi	r25, 0x03	; 3
 866:	41 f1       	breq	.+80     	; 0x8b8 <__stack+0x59>
 868:	70 c0       	rjmp	.+224    	; 0x94a <__stack+0xeb>
			{
				case A:
				CLR_BIT(PORTA,Local_u8Pin);
 86a:	3b b3       	in	r19, 0x1b	; 27
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
 872:	88 0f       	add	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	2a 95       	dec	r18
 878:	e2 f7       	brpl	.-8      	; 0x872 <__stack+0x13>
 87a:	80 95       	com	r24
 87c:	83 23       	and	r24, r19
 87e:	8b bb       	out	0x1b, r24	; 27
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 880:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_Low:
			switch(Local_u8Port)
			{
				case A:
				CLR_BIT(PORTA,Local_u8Pin);
				break;
 882:	08 95       	ret
				case B:
				CLR_BIT(PORTB,Local_u8Pin);
 884:	38 b3       	in	r19, 0x18	; 24
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
 88c:	88 0f       	add	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	2a 95       	dec	r18
 892:	e2 f7       	brpl	.-8      	; 0x88c <__stack+0x2d>
 894:	80 95       	com	r24
 896:	83 23       	and	r24, r19
 898:	88 bb       	out	0x18, r24	; 24
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 89a:	81 e0       	ldi	r24, 0x01	; 1
				case A:
				CLR_BIT(PORTA,Local_u8Pin);
				break;
				case B:
				CLR_BIT(PORTB,Local_u8Pin);
				break;
 89c:	08 95       	ret
				case C:
				CLR_BIT(PORTC,Local_u8Pin);
 89e:	35 b3       	in	r19, 0x15	; 21
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	2a 95       	dec	r18
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	80 95       	com	r24
 8b0:	83 23       	and	r24, r19
 8b2:	85 bb       	out	0x15, r24	; 21
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 8b4:	81 e0       	ldi	r24, 0x01	; 1
				case B:
				CLR_BIT(PORTB,Local_u8Pin);
				break;
				case C:
				CLR_BIT(PORTC,Local_u8Pin);
				break;
 8b6:	08 95       	ret
				case D:
				CLR_BIT(PORTD,Local_u8Pin);
 8b8:	32 b3       	in	r19, 0x12	; 18
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__stack+0x65>
 8c0:	88 0f       	add	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	2a 95       	dec	r18
 8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <__stack+0x61>
 8c8:	80 95       	com	r24
 8ca:	83 23       	and	r24, r19
 8cc:	82 bb       	out	0x12, r24	; 18
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 8ce:	81 e0       	ldi	r24, 0x01	; 1
				case C:
				CLR_BIT(PORTC,Local_u8Pin);
				break;
				case D:
				CLR_BIT(PORTD,Local_u8Pin);
				break;
 8d0:	08 95       	ret
				default:return ES_OUT_OF_RANGE;
				break;
			}
			break;
			case DIO_High:
			switch(Local_u8Port)
 8d2:	91 30       	cpi	r25, 0x01	; 1
 8d4:	91 f0       	breq	.+36     	; 0x8fa <__stack+0x9b>
 8d6:	28 f0       	brcs	.+10     	; 0x8e2 <__stack+0x83>
 8d8:	92 30       	cpi	r25, 0x02	; 2
 8da:	d9 f0       	breq	.+54     	; 0x912 <__stack+0xb3>
 8dc:	93 30       	cpi	r25, 0x03	; 3
 8de:	29 f1       	breq	.+74     	; 0x92a <__stack+0xcb>
 8e0:	36 c0       	rjmp	.+108    	; 0x94e <__stack+0xef>
			{
				case A:
				SET_BIT(PORTA,Local_u8Pin);
 8e2:	3b b3       	in	r19, 0x1b	; 27
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	2a 95       	dec	r18
 8f0:	e2 f7       	brpl	.-8      	; 0x8ea <__stack+0x8b>
 8f2:	83 2b       	or	r24, r19
 8f4:	8b bb       	out	0x1b, r24	; 27
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 8f6:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_High:
			switch(Local_u8Port)
			{
				case A:
				SET_BIT(PORTA,Local_u8Pin);
				break;
 8f8:	08 95       	ret
				case B:
				SET_BIT(PORTB,Local_u8Pin);
 8fa:	38 b3       	in	r19, 0x18	; 24
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0xa7>
 902:	88 0f       	add	r24, r24
 904:	99 1f       	adc	r25, r25
 906:	2a 95       	dec	r18
 908:	e2 f7       	brpl	.-8      	; 0x902 <__stack+0xa3>
 90a:	83 2b       	or	r24, r19
 90c:	88 bb       	out	0x18, r24	; 24
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 90e:	81 e0       	ldi	r24, 0x01	; 1
				case A:
				SET_BIT(PORTA,Local_u8Pin);
				break;
				case B:
				SET_BIT(PORTB,Local_u8Pin);
				break;
 910:	08 95       	ret
				case C:
				SET_BIT(PORTC,Local_u8Pin);
 912:	35 b3       	in	r19, 0x15	; 21
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0xbf>
 91a:	88 0f       	add	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	2a 95       	dec	r18
 920:	e2 f7       	brpl	.-8      	; 0x91a <__stack+0xbb>
 922:	83 2b       	or	r24, r19
 924:	85 bb       	out	0x15, r24	; 21
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 926:	81 e0       	ldi	r24, 0x01	; 1
				case B:
				SET_BIT(PORTB,Local_u8Pin);
				break;
				case C:
				SET_BIT(PORTC,Local_u8Pin);
				break;
 928:	08 95       	ret
				case D:
				SET_BIT(PORTD,Local_u8Pin);
 92a:	32 b3       	in	r19, 0x12	; 18
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0xd7>
 932:	88 0f       	add	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	2a 95       	dec	r18
 938:	e2 f7       	brpl	.-8      	; 0x932 <__stack+0xd3>
 93a:	83 2b       	or	r24, r19
 93c:	82 bb       	out	0x12, r24	; 18
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
 93e:	81 e0       	ldi	r24, 0x01	; 1
				case C:
				SET_BIT(PORTC,Local_u8Pin);
				break;
				case D:
				SET_BIT(PORTD,Local_u8Pin);
				break;
 940:	08 95       	ret
			default: return ES_OUT_OF_RANGE;
		}
		return ES_OK;
	}else
	{
		return ES_OUT_OF_RANGE;
 942:	82 e0       	ldi	r24, 0x02	; 2
 944:	08 95       	ret
				break;
				default:return ES_OUT_OF_RANGE;
				break;
			}
			break;
			default: return ES_OUT_OF_RANGE;
 946:	82 e0       	ldi	r24, 0x02	; 2
 948:	08 95       	ret
				CLR_BIT(PORTC,Local_u8Pin);
				break;
				case D:
				CLR_BIT(PORTD,Local_u8Pin);
				break;
				default:return ES_OUT_OF_RANGE;
 94a:	82 e0       	ldi	r24, 0x02	; 2
 94c:	08 95       	ret
				SET_BIT(PORTC,Local_u8Pin);
				break;
				case D:
				SET_BIT(PORTD,Local_u8Pin);
				break;
				default:return ES_OUT_OF_RANGE;
 94e:	82 e0       	ldi	r24, 0x02	; 2
		return ES_OK;
	}else
	{
		return ES_OUT_OF_RANGE;
	}
}
 950:	08 95       	ret

00000952 <__vector_1>:
	}
	return ES_NOK;
}

ISR(INT0_vect_1)
{
 952:	1f 92       	push	r1
 954:	0f 92       	push	r0
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	0f 92       	push	r0
 95a:	11 24       	eor	r1, r1
 95c:	2f 93       	push	r18
 95e:	3f 93       	push	r19
 960:	4f 93       	push	r20
 962:	5f 93       	push	r21
 964:	6f 93       	push	r22
 966:	7f 93       	push	r23
 968:	8f 93       	push	r24
 96a:	9f 93       	push	r25
 96c:	af 93       	push	r26
 96e:	bf 93       	push	r27
 970:	ef 93       	push	r30
 972:	ff 93       	push	r31
	if(AvpAppParameter[0] != NULL)
 974:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <AvpAppParameter>
 978:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <AvpAppParameter+0x1>
 97c:	00 97       	sbiw	r24, 0x00	; 0
 97e:	29 f0       	breq	.+10     	; 0x98a <__vector_1+0x38>
	{
		ApFunApp[0](AvpAppParameter[0]);
 980:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <ApFunApp>
 984:	f0 91 ff 00 	lds	r31, 0x00FF	; 0x8000ff <ApFunApp+0x1>
 988:	09 95       	icall
	}
}
 98a:	ff 91       	pop	r31
 98c:	ef 91       	pop	r30
 98e:	bf 91       	pop	r27
 990:	af 91       	pop	r26
 992:	9f 91       	pop	r25
 994:	8f 91       	pop	r24
 996:	7f 91       	pop	r23
 998:	6f 91       	pop	r22
 99a:	5f 91       	pop	r21
 99c:	4f 91       	pop	r20
 99e:	3f 91       	pop	r19
 9a0:	2f 91       	pop	r18
 9a2:	0f 90       	pop	r0
 9a4:	0f be       	out	0x3f, r0	; 63
 9a6:	0f 90       	pop	r0
 9a8:	1f 90       	pop	r1
 9aa:	18 95       	reti

000009ac <__vector_2>:
ISR(INT1_vect_2)
{
 9ac:	1f 92       	push	r1
 9ae:	0f 92       	push	r0
 9b0:	0f b6       	in	r0, 0x3f	; 63
 9b2:	0f 92       	push	r0
 9b4:	11 24       	eor	r1, r1
 9b6:	2f 93       	push	r18
 9b8:	3f 93       	push	r19
 9ba:	4f 93       	push	r20
 9bc:	5f 93       	push	r21
 9be:	6f 93       	push	r22
 9c0:	7f 93       	push	r23
 9c2:	8f 93       	push	r24
 9c4:	9f 93       	push	r25
 9c6:	af 93       	push	r26
 9c8:	bf 93       	push	r27
 9ca:	ef 93       	push	r30
 9cc:	ff 93       	push	r31
	if(AvpAppParameter[1] != NULL)
 9ce:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <AvpAppParameter+0x2>
 9d2:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <AvpAppParameter+0x3>
 9d6:	00 97       	sbiw	r24, 0x00	; 0
 9d8:	29 f0       	breq	.+10     	; 0x9e4 <__vector_2+0x38>
	{
		ApFunApp[1](AvpAppParameter[1]);
 9da:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ApFunApp+0x2>
 9de:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ApFunApp+0x3>
 9e2:	09 95       	icall
	}
}
 9e4:	ff 91       	pop	r31
 9e6:	ef 91       	pop	r30
 9e8:	bf 91       	pop	r27
 9ea:	af 91       	pop	r26
 9ec:	9f 91       	pop	r25
 9ee:	8f 91       	pop	r24
 9f0:	7f 91       	pop	r23
 9f2:	6f 91       	pop	r22
 9f4:	5f 91       	pop	r21
 9f6:	4f 91       	pop	r20
 9f8:	3f 91       	pop	r19
 9fa:	2f 91       	pop	r18
 9fc:	0f 90       	pop	r0
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	0f 90       	pop	r0
 a02:	1f 90       	pop	r1
 a04:	18 95       	reti

00000a06 <__vector_3>:
ISR(INT2_vect_3)
{
 a06:	1f 92       	push	r1
 a08:	0f 92       	push	r0
 a0a:	0f b6       	in	r0, 0x3f	; 63
 a0c:	0f 92       	push	r0
 a0e:	11 24       	eor	r1, r1
 a10:	2f 93       	push	r18
 a12:	3f 93       	push	r19
 a14:	4f 93       	push	r20
 a16:	5f 93       	push	r21
 a18:	6f 93       	push	r22
 a1a:	7f 93       	push	r23
 a1c:	8f 93       	push	r24
 a1e:	9f 93       	push	r25
 a20:	af 93       	push	r26
 a22:	bf 93       	push	r27
 a24:	ef 93       	push	r30
 a26:	ff 93       	push	r31
	if(AvpAppParameter[2] != NULL)
 a28:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <AvpAppParameter+0x4>
 a2c:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <AvpAppParameter+0x5>
 a30:	00 97       	sbiw	r24, 0x00	; 0
 a32:	29 f0       	breq	.+10     	; 0xa3e <__vector_3+0x38>
	{
		ApFunApp[2](AvpAppParameter[2]);
 a34:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <ApFunApp+0x4>
 a38:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <ApFunApp+0x5>
 a3c:	09 95       	icall
	}
}
 a3e:	ff 91       	pop	r31
 a40:	ef 91       	pop	r30
 a42:	bf 91       	pop	r27
 a44:	af 91       	pop	r26
 a46:	9f 91       	pop	r25
 a48:	8f 91       	pop	r24
 a4a:	7f 91       	pop	r23
 a4c:	6f 91       	pop	r22
 a4e:	5f 91       	pop	r21
 a50:	4f 91       	pop	r20
 a52:	3f 91       	pop	r19
 a54:	2f 91       	pop	r18
 a56:	0f 90       	pop	r0
 a58:	0f be       	out	0x3f, r0	; 63
 a5a:	0f 90       	pop	r0
 a5c:	1f 90       	pop	r1
 a5e:	18 95       	reti

00000a60 <__vector_11>:
	}
	return ES_NOK;
}

ISR(TIMER0_OVF_vect_11)
{
 a60:	1f 92       	push	r1
 a62:	0f 92       	push	r0
 a64:	0f b6       	in	r0, 0x3f	; 63
 a66:	0f 92       	push	r0
 a68:	11 24       	eor	r1, r1
 a6a:	2f 93       	push	r18
 a6c:	3f 93       	push	r19
 a6e:	4f 93       	push	r20
 a70:	5f 93       	push	r21
 a72:	6f 93       	push	r22
 a74:	7f 93       	push	r23
 a76:	8f 93       	push	r24
 a78:	9f 93       	push	r25
 a7a:	af 93       	push	r26
 a7c:	bf 93       	push	r27
 a7e:	ef 93       	push	r30
 a80:	ff 93       	push	r31
	static u32 counter;
	counter++;
 a82:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <counter.1704>
 a86:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <counter.1704+0x1>
 a8a:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <counter.1704+0x2>
 a8e:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <counter.1704+0x3>
 a92:	01 96       	adiw	r24, 0x01	; 1
 a94:	a1 1d       	adc	r26, r1
 a96:	b1 1d       	adc	r27, r1
 a98:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <counter.1704>
 a9c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <counter.1704+0x1>
 aa0:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <counter.1704+0x2>
 aa4:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <counter.1704+0x3>
	if(counter == Num_OVF)
 aa8:	89 2b       	or	r24, r25
 aaa:	8a 2b       	or	r24, r26
 aac:	8b 2b       	or	r24, r27
 aae:	91 f4       	brne	.+36     	; 0xad4 <__vector_11+0x74>
	{
		pFunApp(vpAppParameter);
 ab0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <pFunApp>
 ab4:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <pFunApp+0x1>
 ab8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <vpAppParameter>
 abc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <vpAppParameter+0x1>
 ac0:	09 95       	icall
		counter=0;
 ac2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <counter.1704>
 ac6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <counter.1704+0x1>
 aca:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <counter.1704+0x2>
 ace:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <counter.1704+0x3>
		TCNT0 = Preload;
 ad2:	12 be       	out	0x32, r1	; 50
	}
}
 ad4:	ff 91       	pop	r31
 ad6:	ef 91       	pop	r30
 ad8:	bf 91       	pop	r27
 ada:	af 91       	pop	r26
 adc:	9f 91       	pop	r25
 ade:	8f 91       	pop	r24
 ae0:	7f 91       	pop	r23
 ae2:	6f 91       	pop	r22
 ae4:	5f 91       	pop	r21
 ae6:	4f 91       	pop	r20
 ae8:	3f 91       	pop	r19
 aea:	2f 91       	pop	r18
 aec:	0f 90       	pop	r0
 aee:	0f be       	out	0x3f, r0	; 63
 af0:	0f 90       	pop	r0
 af2:	1f 90       	pop	r1
 af4:	18 95       	reti

00000af6 <__vector_10>:
ISR(TIMER0_COMP_vect_10)
{
 af6:	1f 92       	push	r1
 af8:	0f 92       	push	r0
 afa:	0f b6       	in	r0, 0x3f	; 63
 afc:	0f 92       	push	r0
 afe:	11 24       	eor	r1, r1
 b00:	2f 93       	push	r18
 b02:	3f 93       	push	r19
 b04:	4f 93       	push	r20
 b06:	5f 93       	push	r21
 b08:	6f 93       	push	r22
 b0a:	7f 93       	push	r23
 b0c:	8f 93       	push	r24
 b0e:	9f 93       	push	r25
 b10:	af 93       	push	r26
 b12:	bf 93       	push	r27
 b14:	ef 93       	push	r30
 b16:	ff 93       	push	r31
	static u32 counter;
	counter++;
 b18:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter.1710>
 b1c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <counter.1710+0x1>
 b20:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <counter.1710+0x2>
 b24:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <counter.1710+0x3>
 b28:	01 96       	adiw	r24, 0x01	; 1
 b2a:	a1 1d       	adc	r26, r1
 b2c:	b1 1d       	adc	r27, r1
 b2e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter.1710>
 b32:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <counter.1710+0x1>
 b36:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <counter.1710+0x2>
 b3a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <counter.1710+0x3>
	if(counter == Num_OCM)
 b3e:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <Num_OCM>
 b42:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <Num_OCM+0x1>
 b46:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Num_OCM+0x2>
 b4a:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <Num_OCM+0x3>
 b4e:	84 17       	cp	r24, r20
 b50:	95 07       	cpc	r25, r21
 b52:	a6 07       	cpc	r26, r22
 b54:	b7 07       	cpc	r27, r23
 b56:	89 f4       	brne	.+34     	; 0xb7a <__vector_10+0x84>
	{
		pFunApp(vpAppParameter);
 b58:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <pFunApp>
 b5c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <pFunApp+0x1>
 b60:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <vpAppParameter>
 b64:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <vpAppParameter+0x1>
 b68:	09 95       	icall
		counter=0;
 b6a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter.1710>
 b6e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter.1710+0x1>
 b72:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <counter.1710+0x2>
 b76:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <counter.1710+0x3>
	}
	
 b7a:	ff 91       	pop	r31
 b7c:	ef 91       	pop	r30
 b7e:	bf 91       	pop	r27
 b80:	af 91       	pop	r26
 b82:	9f 91       	pop	r25
 b84:	8f 91       	pop	r24
 b86:	7f 91       	pop	r23
 b88:	6f 91       	pop	r22
 b8a:	5f 91       	pop	r21
 b8c:	4f 91       	pop	r20
 b8e:	3f 91       	pop	r19
 b90:	2f 91       	pop	r18
 b92:	0f 90       	pop	r0
 b94:	0f be       	out	0x3f, r0	; 63
 b96:	0f 90       	pop	r0
 b98:	1f 90       	pop	r1
 b9a:	18 95       	reti

00000b9c <__vector_6>:
		return ES_NULL_POINTER;
	}
	return ES_NOK;
}
ISR(TIMER1_CAPT_vect_6)
{
 b9c:	1f 92       	push	r1
 b9e:	0f 92       	push	r0
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	0f 92       	push	r0
 ba4:	11 24       	eor	r1, r1
	
}
 ba6:	0f 90       	pop	r0
 ba8:	0f be       	out	0x3f, r0	; 63
 baa:	0f 90       	pop	r0
 bac:	1f 90       	pop	r1
 bae:	18 95       	reti

00000bb0 <__vector_7>:
ISR(TIMER1_COMPA_vect_7)
{
 bb0:	1f 92       	push	r1
 bb2:	0f 92       	push	r0
 bb4:	0f b6       	in	r0, 0x3f	; 63
 bb6:	0f 92       	push	r0
 bb8:	11 24       	eor	r1, r1
 bba:	2f 93       	push	r18
 bbc:	3f 93       	push	r19
 bbe:	4f 93       	push	r20
 bc0:	5f 93       	push	r21
 bc2:	6f 93       	push	r22
 bc4:	7f 93       	push	r23
 bc6:	8f 93       	push	r24
 bc8:	9f 93       	push	r25
 bca:	af 93       	push	r26
 bcc:	bf 93       	push	r27
 bce:	ef 93       	push	r30
 bd0:	ff 93       	push	r31
	static u32 counter;
	counter++;
 bd2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <counter.1705>
 bd6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <counter.1705+0x1>
 bda:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <counter.1705+0x2>
 bde:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <counter.1705+0x3>
 be2:	01 96       	adiw	r24, 0x01	; 1
 be4:	a1 1d       	adc	r26, r1
 be6:	b1 1d       	adc	r27, r1
 be8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <counter.1705>
 bec:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <counter.1705+0x1>
 bf0:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <counter.1705+0x2>
 bf4:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <counter.1705+0x3>
	if(counter == Num_OCM)
 bf8:	89 2b       	or	r24, r25
 bfa:	8a 2b       	or	r24, r26
 bfc:	8b 2b       	or	r24, r27
 bfe:	89 f4       	brne	.+34     	; 0xc22 <__vector_7+0x72>
	{
		pFunApp(vpAppParameter);
 c00:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <pFunApp>
 c04:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <pFunApp+0x1>
 c08:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <vpAppParameter>
 c0c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <vpAppParameter+0x1>
 c10:	09 95       	icall
		counter=0;
 c12:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <counter.1705>
 c16:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <counter.1705+0x1>
 c1a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <counter.1705+0x2>
 c1e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <counter.1705+0x3>
	}
}
 c22:	ff 91       	pop	r31
 c24:	ef 91       	pop	r30
 c26:	bf 91       	pop	r27
 c28:	af 91       	pop	r26
 c2a:	9f 91       	pop	r25
 c2c:	8f 91       	pop	r24
 c2e:	7f 91       	pop	r23
 c30:	6f 91       	pop	r22
 c32:	5f 91       	pop	r21
 c34:	4f 91       	pop	r20
 c36:	3f 91       	pop	r19
 c38:	2f 91       	pop	r18
 c3a:	0f 90       	pop	r0
 c3c:	0f be       	out	0x3f, r0	; 63
 c3e:	0f 90       	pop	r0
 c40:	1f 90       	pop	r1
 c42:	18 95       	reti

00000c44 <__vector_8>:
ISR(TIMER1_COMPB_vect_8)
{
 c44:	1f 92       	push	r1
 c46:	0f 92       	push	r0
 c48:	0f b6       	in	r0, 0x3f	; 63
 c4a:	0f 92       	push	r0
 c4c:	11 24       	eor	r1, r1
 c4e:	2f 93       	push	r18
 c50:	3f 93       	push	r19
 c52:	4f 93       	push	r20
 c54:	5f 93       	push	r21
 c56:	6f 93       	push	r22
 c58:	7f 93       	push	r23
 c5a:	8f 93       	push	r24
 c5c:	9f 93       	push	r25
 c5e:	af 93       	push	r26
 c60:	bf 93       	push	r27
 c62:	ef 93       	push	r30
 c64:	ff 93       	push	r31
	static u32 counter;
	counter++;
 c66:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <counter.1711>
 c6a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <counter.1711+0x1>
 c6e:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <counter.1711+0x2>
 c72:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <counter.1711+0x3>
 c76:	01 96       	adiw	r24, 0x01	; 1
 c78:	a1 1d       	adc	r26, r1
 c7a:	b1 1d       	adc	r27, r1
 c7c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <counter.1711>
 c80:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <counter.1711+0x1>
 c84:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <counter.1711+0x2>
 c88:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <counter.1711+0x3>
	if(counter == Num_OCM)
 c8c:	89 2b       	or	r24, r25
 c8e:	8a 2b       	or	r24, r26
 c90:	8b 2b       	or	r24, r27
 c92:	89 f4       	brne	.+34     	; 0xcb6 <__vector_8+0x72>
	{
		pFunApp(vpAppParameter);
 c94:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <pFunApp>
 c98:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <pFunApp+0x1>
 c9c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <vpAppParameter>
 ca0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <vpAppParameter+0x1>
 ca4:	09 95       	icall
		counter=0;
 ca6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <counter.1711>
 caa:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <counter.1711+0x1>
 cae:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <counter.1711+0x2>
 cb2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <counter.1711+0x3>
	}
}
 cb6:	ff 91       	pop	r31
 cb8:	ef 91       	pop	r30
 cba:	bf 91       	pop	r27
 cbc:	af 91       	pop	r26
 cbe:	9f 91       	pop	r25
 cc0:	8f 91       	pop	r24
 cc2:	7f 91       	pop	r23
 cc4:	6f 91       	pop	r22
 cc6:	5f 91       	pop	r21
 cc8:	4f 91       	pop	r20
 cca:	3f 91       	pop	r19
 ccc:	2f 91       	pop	r18
 cce:	0f 90       	pop	r0
 cd0:	0f be       	out	0x3f, r0	; 63
 cd2:	0f 90       	pop	r0
 cd4:	1f 90       	pop	r1
 cd6:	18 95       	reti

00000cd8 <__vector_9>:
ISR(TIMER1_OVF_vect_9)
{
 cd8:	1f 92       	push	r1
 cda:	0f 92       	push	r0
 cdc:	0f b6       	in	r0, 0x3f	; 63
 cde:	0f 92       	push	r0
 ce0:	11 24       	eor	r1, r1
 ce2:	2f 93       	push	r18
 ce4:	3f 93       	push	r19
 ce6:	4f 93       	push	r20
 ce8:	5f 93       	push	r21
 cea:	6f 93       	push	r22
 cec:	7f 93       	push	r23
 cee:	8f 93       	push	r24
 cf0:	9f 93       	push	r25
 cf2:	af 93       	push	r26
 cf4:	bf 93       	push	r27
 cf6:	ef 93       	push	r30
 cf8:	ff 93       	push	r31
	static u32 counter;
	counter++;
 cfa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <counter.1717>
 cfe:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <counter.1717+0x1>
 d02:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <counter.1717+0x2>
 d06:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <counter.1717+0x3>
 d0a:	01 96       	adiw	r24, 0x01	; 1
 d0c:	a1 1d       	adc	r26, r1
 d0e:	b1 1d       	adc	r27, r1
 d10:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <counter.1717>
 d14:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <counter.1717+0x1>
 d18:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <counter.1717+0x2>
 d1c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <counter.1717+0x3>
	if(counter == Num_OVF)
 d20:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <Num_OVF>
 d24:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <Num_OVF+0x1>
 d28:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <Num_OVF+0x2>
 d2c:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <Num_OVF+0x3>
 d30:	84 17       	cp	r24, r20
 d32:	95 07       	cpc	r25, r21
 d34:	a6 07       	cpc	r26, r22
 d36:	b7 07       	cpc	r27, r23
 d38:	b9 f4       	brne	.+46     	; 0xd68 <__vector_9+0x90>
	{
		pFunApp(vpAppParameter);
 d3a:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <pFunApp>
 d3e:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <pFunApp+0x1>
 d42:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <vpAppParameter>
 d46:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <vpAppParameter+0x1>
 d4a:	09 95       	icall
		counter=0;
 d4c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <counter.1717>
 d50:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <counter.1717+0x1>
 d54:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <counter.1717+0x2>
 d58:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <counter.1717+0x3>
		TCNT1 = Preload;
 d5c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Preload>
 d60:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <Preload+0x1>
 d64:	9d bd       	out	0x2d, r25	; 45
 d66:	8c bd       	out	0x2c, r24	; 44
	}
}
 d68:	ff 91       	pop	r31
 d6a:	ef 91       	pop	r30
 d6c:	bf 91       	pop	r27
 d6e:	af 91       	pop	r26
 d70:	9f 91       	pop	r25
 d72:	8f 91       	pop	r24
 d74:	7f 91       	pop	r23
 d76:	6f 91       	pop	r22
 d78:	5f 91       	pop	r21
 d7a:	4f 91       	pop	r20
 d7c:	3f 91       	pop	r19
 d7e:	2f 91       	pop	r18
 d80:	0f 90       	pop	r0
 d82:	0f be       	out	0x3f, r0	; 63
 d84:	0f 90       	pop	r0
 d86:	1f 90       	pop	r1
 d88:	18 95       	reti

00000d8a <__udivmodsi4>:
 d8a:	a1 e2       	ldi	r26, 0x21	; 33
 d8c:	1a 2e       	mov	r1, r26
 d8e:	aa 1b       	sub	r26, r26
 d90:	bb 1b       	sub	r27, r27
 d92:	fd 01       	movw	r30, r26
 d94:	0d c0       	rjmp	.+26     	; 0xdb0 <__udivmodsi4_ep>

00000d96 <__udivmodsi4_loop>:
 d96:	aa 1f       	adc	r26, r26
 d98:	bb 1f       	adc	r27, r27
 d9a:	ee 1f       	adc	r30, r30
 d9c:	ff 1f       	adc	r31, r31
 d9e:	a2 17       	cp	r26, r18
 da0:	b3 07       	cpc	r27, r19
 da2:	e4 07       	cpc	r30, r20
 da4:	f5 07       	cpc	r31, r21
 da6:	20 f0       	brcs	.+8      	; 0xdb0 <__udivmodsi4_ep>
 da8:	a2 1b       	sub	r26, r18
 daa:	b3 0b       	sbc	r27, r19
 dac:	e4 0b       	sbc	r30, r20
 dae:	f5 0b       	sbc	r31, r21

00000db0 <__udivmodsi4_ep>:
 db0:	66 1f       	adc	r22, r22
 db2:	77 1f       	adc	r23, r23
 db4:	88 1f       	adc	r24, r24
 db6:	99 1f       	adc	r25, r25
 db8:	1a 94       	dec	r1
 dba:	69 f7       	brne	.-38     	; 0xd96 <__udivmodsi4_loop>
 dbc:	60 95       	com	r22
 dbe:	70 95       	com	r23
 dc0:	80 95       	com	r24
 dc2:	90 95       	com	r25
 dc4:	9b 01       	movw	r18, r22
 dc6:	ac 01       	movw	r20, r24
 dc8:	bd 01       	movw	r22, r26
 dca:	cf 01       	movw	r24, r30
 dcc:	08 95       	ret

00000dce <_exit>:
 dce:	f8 94       	cli

00000dd0 <__stop_program>:
 dd0:	ff cf       	rjmp	.-2      	; 0xdd0 <__stop_program>
